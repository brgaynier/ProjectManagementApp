// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
//using ProjectManagementApp.Api.Data;
using Infrastructure.Data;


#nullable disable

namespace ProjectManagementApp.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-rc.2.22472.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.Data.SqlClient.DataClassification.Label", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Label", (string)null);
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.Block", b =>
                {
                    b.Property<int>("BlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlockId"));

                    b.Property<string>("BlockName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasBlocker")
                        .HasColumnType("bit");

                    b.HasKey("BlockId");

                    b.HasIndex("BoardId");

                    b.ToTable("Blocks", (string)null);
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.Board", b =>
                {
                    b.Property<int>("BoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BoardId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BoardId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Boards", (string)null);
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardId"));

                    b.Property<DateTime?>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("BlockId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CoverId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasBlocker")
                        .HasColumnType("bit");

                    b.Property<string>("LabelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CardId");

                    b.HasIndex("BlockId");

                    b.HasIndex("CoverId");

                    b.HasIndex("LabelId");

                    b.ToTable("Cards", (string)null);
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.ChangeOrder", b =>
                {
                    b.Property<int>("ChangeOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChangeOrderId"));

                    b.Property<int>("AmountOwed")
                        .HasColumnType("int");

                    b.Property<string>("ChangeOrderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChangeOrderNumber")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChangeOrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("ChangeOrders", (string)null);
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.Checklist", b =>
                {
                    b.Property<int>("ChecklistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChecklistId"));

                    b.Property<int?>("CardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasBlocker")
                        .HasColumnType("bit");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChecklistId");

                    b.HasIndex("CardId");

                    b.HasIndex("MemberId");

                    b.ToTable("Checklists", (string)null);
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.ChecklistItem", b =>
                {
                    b.Property<int>("ChecklistItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChecklistItemId"));

                    b.Property<int?>("ChecklistId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("HasBlocker")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WorkFlowId")
                        .HasColumnType("int");

                    b.HasKey("ChecklistItemId");

                    b.HasIndex("ChecklistId");

                    b.HasIndex("WorkFlowId");

                    b.ToTable("ChecklistItems", (string)null);
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.Cover", b =>
                {
                    b.Property<int>("CoverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoverId"));

                    b.Property<int>("Black")
                        .HasColumnType("int");

                    b.Property<int>("Blue")
                        .HasColumnType("int");

                    b.Property<int>("Green")
                        .HasColumnType("int");

                    b.Property<int>("Orange")
                        .HasColumnType("int");

                    b.Property<int>("Pink")
                        .HasColumnType("int");

                    b.Property<int>("Purple")
                        .HasColumnType("int");

                    b.Property<int>("Red")
                        .HasColumnType("int");

                    b.Property<int>("SeaGrass")
                        .HasColumnType("int");

                    b.Property<int>("Turquoise")
                        .HasColumnType("int");

                    b.Property<int>("Yellow")
                        .HasColumnType("int");

                    b.HasKey("CoverId");

                    b.ToTable("Covers", (string)null);
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityTown")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StateProvince")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"));

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CardId")
                        .HasColumnType("int");

                    b.Property<int?>("ChecklistItemId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WorkFlowItemId")
                        .HasColumnType("int");

                    b.HasKey("MemberId");

                    b.HasIndex("CardId");

                    b.HasIndex("ChecklistItemId");

                    b.HasIndex("WorkFlowItemId");

                    b.ToTable("Members", (string)null);
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.WorkFlow", b =>
                {
                    b.Property<int>("WorkFlowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkFlowId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("WorkFlowName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkFlowId");

                    b.HasIndex("CustomerId");

                    b.ToTable("WorkFlows", (string)null);
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.WorkFlowItem", b =>
                {
                    b.Property<int>("WorkFlowItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkFlowItemId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("HasBlocker")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WorkFlowId")
                        .HasColumnType("int");

                    b.HasKey("WorkFlowItemId");

                    b.HasIndex("WorkFlowId");

                    b.ToTable("WorkFlowItems", (string)null);
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.Block", b =>
                {
                    b.HasOne("ProjectManagementApp.Api.Data.Entities.Board", "Board")
                        .WithMany("Blocks")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.Board", b =>
                {
                    b.HasOne("ProjectManagementApp.Api.Data.Entities.Customer", "Customer")
                        .WithMany("Boards")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.Card", b =>
                {
                    b.HasOne("ProjectManagementApp.Api.Data.Entities.Block", "Block")
                        .WithMany("Cards")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagementApp.Api.Data.Entities.Cover", "Cover")
                        .WithMany()
                        .HasForeignKey("CoverId");

                    b.HasOne("Microsoft.Data.SqlClient.DataClassification.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId");

                    b.Navigation("Block");

                    b.Navigation("Cover");

                    b.Navigation("Label");
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.ChangeOrder", b =>
                {
                    b.HasOne("ProjectManagementApp.Api.Data.Entities.Customer", "Customer")
                        .WithMany("ChangeOrders")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.Checklist", b =>
                {
                    b.HasOne("ProjectManagementApp.Api.Data.Entities.Card", "Card")
                        .WithMany("Checklist")
                        .HasForeignKey("CardId");

                    b.HasOne("ProjectManagementApp.Api.Data.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId");

                    b.Navigation("Card");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.ChecklistItem", b =>
                {
                    b.HasOne("ProjectManagementApp.Api.Data.Entities.Checklist", "Checklist")
                        .WithMany("ChecklistItems")
                        .HasForeignKey("ChecklistId");

                    b.HasOne("ProjectManagementApp.Api.Data.Entities.WorkFlow", null)
                        .WithMany("ChecklistItems")
                        .HasForeignKey("WorkFlowId");

                    b.Navigation("Checklist");
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.Member", b =>
                {
                    b.HasOne("ProjectManagementApp.Api.Data.Entities.Card", "Card")
                        .WithMany("Member")
                        .HasForeignKey("CardId");

                    b.HasOne("ProjectManagementApp.Api.Data.Entities.ChecklistItem", null)
                        .WithMany("Member")
                        .HasForeignKey("ChecklistItemId");

                    b.HasOne("ProjectManagementApp.Api.Data.Entities.WorkFlowItem", null)
                        .WithMany("Member")
                        .HasForeignKey("WorkFlowItemId");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.WorkFlow", b =>
                {
                    b.HasOne("ProjectManagementApp.Api.Data.Entities.Customer", "Customer")
                        .WithMany("WorkFlows")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.WorkFlowItem", b =>
                {
                    b.HasOne("ProjectManagementApp.Api.Data.Entities.WorkFlow", "WorkFlow")
                        .WithMany("WorkFlowItems")
                        .HasForeignKey("WorkFlowId");

                    b.Navigation("WorkFlow");
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.Block", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.Board", b =>
                {
                    b.Navigation("Blocks");
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.Card", b =>
                {
                    b.Navigation("Checklist");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.Checklist", b =>
                {
                    b.Navigation("ChecklistItems");
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.ChecklistItem", b =>
                {
                    b.Navigation("Member");
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.Customer", b =>
                {
                    b.Navigation("Boards");

                    b.Navigation("ChangeOrders");

                    b.Navigation("WorkFlows");
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.WorkFlow", b =>
                {
                    b.Navigation("ChecklistItems");

                    b.Navigation("WorkFlowItems");
                });

            modelBuilder.Entity("ProjectManagementApp.Api.Data.Entities.WorkFlowItem", b =>
                {
                    b.Navigation("Member");
                });
#pragma warning restore 612, 618
        }
    }
}
